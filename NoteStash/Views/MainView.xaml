<base:WindowBase x:Class="NoteStash.Views.MainView"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                 xmlns:base="clr-namespace:NoteStash.Base"
                 xmlns:behaviors="clr-namespace:NoteStash.Behaviors"
                 xmlns:c="clr-namespace:NoteStash.Controls"
                 xmlns:converters="clr-namespace:NoteStash.Converters"
                 xmlns:vm="clr-namespace:NoteStash.ViewModels"
                 xmlns:v="clr-namespace:NoteStash.Views"
                 mc:Ignorable="d"
                 d:DataContext="{d:DesignInstance Type=vm:MainViewModel}"
                 Topmost="{Binding ElementName=WindowOnTopMenuItem, Path=IsChecked}"
                 ResizeMode="CanResize"
                 Height="600"
                 Width="900"
                 WindowStyle="None"
                 WindowState="Normal"
                 FontFamily="Segoe UI"
                 FontSize="12"
                 WindowStartupLocation="CenterScreen"
                 BorderThickness="1"
                 BorderBrush="{DynamicResource App.BorderBrush}"
                 Foreground="{DynamicResource App.ForegroundBrush}"
                 Background="{DynamicResource App.BackgroundBrush}"
                 Title="NoteStash"
                 Closing="CloseHandler"
                 PreviewKeyDown="Window_PreviewKeyDown"
                 PreviewMouseDown="Window_PreviewMouseDown">
    <Window.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <converters:MatchingIntToBooleanConverter x:Key="MatchingIntToBooleanConverter" />
        <converters:DateTimeToStringConverter x:Key="DateTimeToStringConverter" />
        <converters:VisibilityToWidthConverter x:Key="VisibilityToWidthConverter" />
        <converters:IntToVisibilityConverter x:Key="IntToVisibilityConverter" />
        <converters:LongToSizeStringConverter x:Key="LongToSizeStringConverter" />
        <converters:BooleanToInverseBooleanConverter x:Key="BooleanToInverseBooleanConverter" />
        <CollectionViewSource x:Key="RecentFiles"
                              Source="{Binding RecentFiles}" />
    </Window.Resources>
    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="1"
                      ResizeBorderThickness="5">
        </WindowChrome>
    </WindowChrome.WindowChrome>
    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Close"
                        Executed="CloseWindow" />
    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Command="{Binding ElementName=ActionPalette, Path=DataContext.ToggleShowCommand}"
                    Key="P"
                    Modifiers="Ctrl+Shift" />
        <!--#region File Menu Keybindings-->
        <KeyBinding Modifiers="Control"
                    Key="W"
                    Command="ApplicationCommands.Close" />
        <KeyBinding Key="S"
                    Modifiers="Ctrl"
                    Command="{Binding SaveFileCommand}" />
        <KeyBinding Key="S"
                    Modifiers="Ctrl+Shift"
                    Command="{Binding SaveFileAsCommand}" />
        <KeyBinding Key="O"
                    Modifiers="Ctrl"
                    Command="{Binding OpenFileCommand}" />
        <KeyBinding Key="N"
                    Modifiers="Ctrl"
                    Command="{Binding NewFileCommand}" />
        <KeyBinding Key="N"
                    Modifiers="Ctrl+Shift"
                    Command="{Binding ShowNewWindowCommand}" />
        <!--#endregion-->
        <!--#region Zoom Menu Keybindings-->
        <KeyBinding Key="OemPlus"
                    Modifiers="Ctrl"
                    Command="{Binding ZoomInCommand}" />
        <KeyBinding Key="OemMinus"
                    Modifiers="Ctrl"
                    Command="{Binding ZoomOutCommand}" />
        <KeyBinding Key="D0"
                    Modifiers="Ctrl"
                    Command="{Binding RestoreDefaultZoomCommand}" />
        <!--#endregion-->
        <!--#region Edit Menu Keybindings-->
        <KeyBinding Key="Delete"
                    Modifiers="Ctrl+Shift"
                    Command="{Binding ClearAllTextCommand}" />
        <KeyBinding Key="D"
                    Modifiers="Ctrl"
                    Command="{Binding DuplicateCurrentLineCommand}" />
        <KeyBinding Key="L"
                    Modifiers="Ctrl"
                    Command="{Binding SelectCurrentLineCommand}" />
        <KeyBinding Key="Backspace"
                    Modifiers="Ctrl+Shift"
                    Command="{Binding DeleteCurrentLineCommand}" />
        <KeyBinding Key="Up"
                    Modifiers="Alt"
                    Command="{Binding MoveLineUpCommand}" />
        <KeyBinding Key="Down"
                    Modifiers="Alt"
                    Command="{Binding MoveLineDownCommand}" />
        <!--#endregion-->
        <!--#region Insert Menu Keybindings-->
        <KeyBinding Key="O"
                    Modifiers="Ctrl+Shift"
                    Command="{Binding InsertFileAsTextCommand}" />
        <KeyBinding Key="Return"
                    Modifiers="Ctrl"
                    Command="{Binding InsertLineAfterCommand}" />
        <KeyBinding Key="Return"
                    Modifiers="Ctrl+Shift"
                    Command="{Binding InsertLineBeforeCommand}" />
        <KeyBinding Key="U"
                    Modifiers="Ctrl"
                    Command="{Binding InsertLastUnicodeCharacterCommand}" />
        <!--#endregion-->
        <!--#region Unicode Menu Keybinding-->
        <KeyBinding Command="{Binding SelectNextUnicodeGroupCommand}"
                    Key="OemPeriod"
                    Modifiers="Ctrl" />
        <KeyBinding Command="{Binding SelectPreviousUnicodeGroupCommand}"
                    Key="OemComma"
                    Modifiers="Ctrl" />
        <!--#endregion-->
    </Window.InputBindings>
    <Grid x:Name="MainGrid">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="20" />
            <ColumnDefinition Width="auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="20" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>
        <ui:NotifyIcon FocusOnLeftClick="True"
                       Icon="pack://application:,,,/NoteStash;component/Assets/Icons/icon.ico"
                       MenuOnRightClick="True"
                       TooltipText="Note Stash"
                       LeftDoubleClick="NotifyIcon_DoubleClick">
            <ui:NotifyIcon.Menu>
                <ContextMenu>
                    <MenuItem Header="Shutdown"
                              Click="Shutdown" />
                </ContextMenu>
            </ui:NotifyIcon.Menu>
        </ui:NotifyIcon>
        <DockPanel x:Name="MenuDockPanel"
                   Grid.Column="0"
                   Grid.Row="0"
                   Grid.ColumnSpan="4"
                   Margin="0"
                   Background="Transparent"
                   VerticalAlignment="Top"
                   Height="37"
                   MouseDown="MoveWindow">
            <Menu x:Name="MenuBar"
                  DockPanel.Dock="Left"
                  IsMainMenu="True"
                  Margin="10 1 0 1"
                  Background="Transparent"
                  Foreground="{DynamicResource App.ForegroundBrush}">
                <!--File MenuItem-->
                <MenuItem x:Name="FileMenuItem"
                          Header="_File">
                    <MenuItem x:Name="NewFileMenuItem"
                              Header="_New"
                              InputGestureText="Ctrl+N"
                              Command="{Binding NewFileCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconFileAdd}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="NewWindowMenuItem"
                              Header="New _Window"
                              InputGestureText="Ctrl+Shit+N"
                              Command="{Binding ShowNewWindowCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconWindow}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="OpenMenuItem"
                              Header="_Open"
                              InputGestureText="Ctrl+O"
                              Command="{Binding OpenFileCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconFile}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="OpenContainingFolderMenuItem"
                              Header="Show in Folder"
                              Command="{Binding OpenDocumentDirectoryCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconOpenFolder}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="OpenRecentMenuItem"
                              Header="Recent _Files"
                              Visibility="{Binding RecentFiles.Count, Converter={StaticResource IntToVisibilityConverter}}"
                              UsesItemContainerTemplate="True">
                        <MenuItem.ItemsSource>
                            <CompositeCollection>
                                <CollectionContainer Collection="{Binding Source={StaticResource RecentFiles}}" />
                                <Separator />
                                <MenuItem Header="Refresh"
                                          StaysOpenOnClick="True"
                                          Command="{Binding RefreshRecentFilesCommand}" />
                                <MenuItem Header="Clear"
                                          Command="{Binding ClearRecentFilesCommand}" />
                            </CompositeCollection>
                        </MenuItem.ItemsSource>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="Header"
                                        Value="{Binding}" />
                                <Setter Property="CommandParameter"
                                        Value="{Binding}" />
                                <Setter Property="Command"
                                        Value="{Binding Path=DataContext.OpenRecentFileCommand, ElementName=OpenRecentMenuItem}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="SaveMenuItem"
                              Header="_Save"
                              InputGestureText="Ctrl+S"
                              Command="{Binding SaveFileCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconSave}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="SaveAsMenuItem"
                              Header="Sa_ve As"
                              InputGestureText="Ctrl+Shift+S"
                              Command="{Binding SaveFileAsCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconSaveAs}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="RevertChangesMenuItem"
                              Header="_Revert Changes">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconRevert}" />
                        </MenuItem.Icon>
                        <MenuItem Header="_Last Save"
                                  Command="{Binding RevertChangesToLastSaveCommand}" />
                        <MenuItem Header="_Initial Text"
                                  Command="{Binding RevertChangesToInitialTextCommand}" />
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="AutosaveMenuItem"
                              Header="_Autosave">
                        <MenuItem.Icon>
                            <Image Style="{StaticResource IconTimer}" />
                        </MenuItem.Icon>
                        <MenuItem x:Name="Autosave500MenuItem"
                                  Header="_0.5"
                                  IsCheckable="True"
                                  IsChecked="{Binding AutosaveTimerInterval, ConverterParameter=500, Converter={StaticResource MatchingIntToBooleanConverter}, Mode=TwoWay}" />
                        <MenuItem x:Name="Autosave1000MenuItem"
                                  Header="_1"
                                  IsCheckable="True"
                                  IsChecked="{Binding AutosaveTimerInterval, ConverterParameter=1000, Converter={StaticResource MatchingIntToBooleanConverter}, Mode=TwoWay}" />
                        <MenuItem x:Name="Autosave2000MenuItem"
                                  Header="_2"
                                  IsCheckable="True"
                                  IsChecked="{Binding AutosaveTimerInterval, ConverterParameter=2000, Converter={StaticResource MatchingIntToBooleanConverter}, Mode=TwoWay}" />
                        <MenuItem x:Name="Autosave3000MenuItem"
                                  Header="_3"
                                  IsCheckable="True"
                                  IsChecked="{Binding AutosaveTimerInterval, ConverterParameter=3000, Converter={StaticResource MatchingIntToBooleanConverter}, Mode=TwoWay}" />
                        <MenuItem x:Name="Autosave4000MenuItem"
                                  Header="_4"
                                  IsCheckable="True"
                                  IsChecked="{Binding AutosaveTimerInterval, ConverterParameter=4000, Converter={StaticResource MatchingIntToBooleanConverter}, Mode=TwoWay}" />
                        <Separator />
                        <MenuItem x:Name="Autosave0MenuItem"
                                  Header="_Off"
                                  IsCheckable="True"
                                  IsChecked="{Binding AutosaveTimerInterval, ConverterParameter=0, Converter={StaticResource MatchingIntToBooleanConverter}, Mode=TwoWay}" />
                    </MenuItem>
                    <MenuItem x:Name="PromptToSaveMenuItem"
                              Header="_Prompt to Save"
                              IsCheckable="True"
                              IsChecked="{Binding PromptToSave}" />
                    <Separator />
                    <MenuItem x:Name="ExitMenuItem"
                              Header="_Exit"
                              InputGestureText="Ctrl+W"
                              Click="CloseWindow">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconExit}" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <!--Edit MenuItem-->
                <MenuItem x:Name="EditMenuItem"
                          Header="_Edit">
                    <MenuItem x:Name="UndoMenuItem"
                              Header="_Undo"
                              Command="ApplicationCommands.Undo"
                              InputGestureText="Ctrl+Z">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconUndo}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="RedoMenuItem"
                              Header="_Redo"
                              Command="ApplicationCommands.Redo"
                              InputGestureText="Ctrl+Y">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconRedo}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="CutMenuItem"
                              Header="_Cut"
                              Command="ApplicationCommands.Cut"
                              InputGestureText="Ctrl+X">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconCut}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="CopyMenuItem"
                              Header="Cop_y"
                              Command="ApplicationCommands.Copy"
                              InputGestureText="Ctrl+C">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconCopy}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="CopyToClipboardMenuItem"
                              Header="Copy to Clip_board">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconClipboardAdd}" />
                        </MenuItem.Icon>
                        <MenuItem Header="File _Name"
                                  Command="{Binding CopyFileNameWithoutExtensionCommand}" />
                        <MenuItem Header="File Name w/ _Ext"
                                  Command="{Binding CopyFileNameCommand}" />
                        <Separator />
                        <MenuItem Header="_File Path"
                                  Command="{Binding CopyFilePathCommand}" />
                        <MenuItem Header="F_older Path"
                                  Command="{Binding CopyDirectoryPathCommand}" />
                    </MenuItem>
                    <MenuItem x:Name="PasteMenuItem"
                              Header="_Paste"
                              Command="ApplicationCommands.Paste"
                              InputGestureText="Ctrl+V">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconPaste}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="SelectAllMenuItem"
                              Header="_Select All"
                              Command="ApplicationCommands.SelectAll"
                              InputGestureText="Ctrl+A">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconSelectAll}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="ClearAllMenuItem"
                              Header="Clear _All"
                              InputGestureText="Ctrl+Shift+Del"
                              Command="{Binding ClearAllTextCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconClearAll}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="CaseMenuItem"
                              Header="Cas_e">
                        <MenuItem x:Name="UpperCaseMenuItem"
                                  Header="_UPPERCASE"
                                  StaysOpenOnClick="True"
                                  Command="{Binding UpperCaseCommand}" />
                        <MenuItem x:Name="LowerCaseMenuItem"
                                  Header="_lowercase"
                                  StaysOpenOnClick="True"
                                  Command="{Binding LowerCaseCommand}" />
                        <MenuItem x:Name="TitleCaseMenuItem"
                                  Header="_Title Case"
                                  StaysOpenOnClick="True"
                                  Command="{Binding TitleCaseCommand}" />
                        <MenuItem x:Name="SentenceCaseMenuItem"
                                  Header="_Sentence case"
                                  StaysOpenOnClick="True"
                                  Command="{Binding SentenceCaseCommand}" />
                        <MenuItem x:Name="InvertCaseMenuItem"
                                  Header="_iNVERT cASE"
                                  StaysOpenOnClick="True"
                                  Command="{Binding InvertCaseCommand}" />
                        <MenuItem x:Name="RandomCaseMenuItem"
                                  Header="_rAndOm CasE"
                                  StaysOpenOnClick="True"
                                  Command="{Binding RandomCaseCommand}" />
                    </MenuItem>
                    <MenuItem x:Name="LineMenuItem"
                              Header="_Line">
                        <MenuItem x:Name="SelectCurrentLineMenuItem"
                                  Header="_Select"
                                  StaysOpenOnClick="True"
                                  InputGestureText="Ctrl+L"
                                  Command="{Binding SelectCurrentLineCommand}" />
                        <MenuItem x:Name="DuplicateCurrentLineMenuItem"
                                  Header="Du_plicate"
                                  InputGestureText="Ctrl+D"
                                  StaysOpenOnClick="True"
                                  Command="{Binding DuplicateCurrentLineCommand}" />
                        <MenuItem x:Name="DeleteCurrentLineMenuItem"
                                  Header="_Delete"
                                  InputGestureText="Ctrl+Shift+Backspace"
                                  StaysOpenOnClick="True"
                                  Command="{Binding DeleteCurrentLineCommand}" />
                        <Separator />
                        <MenuItem x:Name="MoveCurrentLineUp"
                                  Header="Move _Up"
                                  InputGestureText="Alt+Up"
                                  StaysOpenOnClick="True"
                                  Command="{Binding MoveLineUpCommand}" />
                        <MenuItem x:Name="MoveCurrentLineDown"
                                  Header="Move Do_wn"
                                  InputGestureText="Alt+Down"
                                  StaysOpenOnClick="True"
                                  Command="{Binding MoveLineDownCommand}" />
                    </MenuItem>
                    <MenuItem x:Name="FormatMenuItem"
                              Header="For_mat">
                        <MenuItem x:Name="TrimMenuItem"
                                  Header="_Trim"
                                  StaysOpenOnClick="True"
                                  Command="{Binding TrimCommand}" />
                        <MenuItem x:Name="TrimStartMenuItem"
                                  Header="Trim _Start"
                                  StaysOpenOnClick="True"
                                  Command="{Binding TrimStartCommand}" />
                        <MenuItem x:Name="TrimEndMenuItem"
                                  Header="Trim _End"
                                  StaysOpenOnClick="True"
                                  Command="{Binding TrimEndCommand}" />
                        <Separator />
                        <MenuItem x:Name="TrimLinesMenuItem"
                                  Header="Trim _Lines"
                                  StaysOpenOnClick="True"
                                  Command="{Binding TrimLinesCommand}" />
                        <MenuItem x:Name="TrimLinesStartMenuItem"
                                  Header="Trim Line Starts"
                                  StaysOpenOnClick="True"
                                  Command="{Binding TrimLinesStartCommand}" />
                        <MenuItem x:Name="TrimLinesEndMenuItem"
                                  Header="Trim Line Ends"
                                  StaysOpenOnClick="True"
                                  Command="{Binding TrimLinesEndCommand}" />
                        <Separator />
                        <MenuItem x:Name="ConvertSpacesToTabsMenuItem"
                                  Header="Convert Spaces to Tabs"
                                  StaysOpenOnClick="True"
                                  Command="{Binding ConvertSpacesToTabsCommand}" />
                        <MenuItem x:Name="ConvertLeadingSpacesToTabsMenuItem"
                                  Header="Convert Leading Spaces to Tabs"
                                  StaysOpenOnClick="True"
                                  Command="{Binding ConvertLeadingSpacesToTabsCommand}" />
                        <Separator />
                        <MenuItem x:Name="ConvertTabsToSpacesMenuItem"
                                  Header="Convert Tabs to Spaces"
                                  StaysOpenOnClick="True"
                                  Command="{Binding ConvertTabsToSpacesCommand}" />
                        <MenuItem x:Name="ConvertLeadingTabsToSpacesMenuItem"
                                  Header="Convert Leading Tabs to Spaces"
                                  StaysOpenOnClick="True"
                                  Command="{Binding ConvertLeadingTabsToSpacesCommand}" />
                        <Separator />
                        <MenuItem x:Name="NormalizeVerticalWhitespaceMenuItem"
                                  Header="Normalize Vertical Whitespace"
                                  StaysOpenOnClick="True"
                                  Command="{Binding NormalizeVerticalWhitespaceCommand}" />
                        <MenuItem x:Name="NormalizeHorizontalWhitespaceMenuItem"
                                  Header="Normalize Horizontal Whitespace"
                                  StaysOpenOnClick="True"
                                  Command="{Binding NormalizeHorizontalWhitespaceCommand}" />
                        <Separator />
                        <MenuItem x:Name="JoinLinesMenuItem"
                                  Header="Join Lines"
                                  StaysOpenOnClick="True"
                                  Command="{Binding JoinLinesCommand}" />
                        <MenuItem x:Name="SplitWordsMenuItem"
                                  Header="Split Words"
                                  StaysOpenOnClick="True"
                                  Command="{Binding SplitWordsCommand}" />
                    </MenuItem>
                    <MenuItem x:Name="SortMenuItem"
                              Header="S_ort">
                        <MenuItem x:Name="SortWordsAscMenuItem"
                                  Header="Sort Words Asc"
                                  StaysOpenOnClick="True"
                                  Command="{Binding SortWordsAscCommand}" />
                        <MenuItem x:Name="SortWordsDescMenuItem"
                                  Header="Sort Words Desc"
                                  StaysOpenOnClick="True"
                                  Command="{Binding SortWordsDescCommand}" />
                        <Separator />
                        <MenuItem x:Name="SortLinesAscMenuItem"
                                  Header="Sort Lines Asc"
                                  StaysOpenOnClick="True"
                                  Command="{Binding SortLinesAscCommand}" />
                        <MenuItem x:Name="SortLinesDescMenuItem"
                                  Header="Sort Lines Desc"
                                  StaysOpenOnClick="True"
                                  Command="{Binding SortLinesDescCommand}" />
                    </MenuItem>
                    <MenuItem x:Name="TabsSpacesMenuItem"
                              Header="_Tabs">
                        <MenuItem x:Name="Space2MenuItem"
                                  Header="_2"
                                  IsCheckable="True"
                                  IsChecked="{Binding TabSize, ConverterParameter=2, Converter={StaticResource MatchingIntToBooleanConverter}, Mode=TwoWay}" />
                        <MenuItem x:Name="Space4MenuItem"
                                  Header="_4"
                                  IsCheckable="True"
                                  IsChecked="{Binding TabSize, ConverterParameter=4, Converter={StaticResource MatchingIntToBooleanConverter}, Mode=TwoWay}" />
                        <MenuItem x:Name="Space6MenuItem"
                                  Header="_6"
                                  IsCheckable="True"
                                  IsChecked="{Binding TabSize, ConverterParameter=6, Converter={StaticResource MatchingIntToBooleanConverter}, Mode=TwoWay}" />
                        <MenuItem x:Name="Space8MenuItem"
                                  Header="_8"
                                  IsCheckable="True"
                                  IsChecked="{Binding TabSize, ConverterParameter=8, Converter={StaticResource MatchingIntToBooleanConverter}, Mode=TwoWay}" />
                        <MenuItem x:Name="Space10MenuItem"
                                  Header="_10"
                                  IsCheckable="True"
                                  IsChecked="{Binding TabSize, ConverterParameter=10, Converter={StaticResource MatchingIntToBooleanConverter}, Mode=TwoWay}" />
                        <Separator />
                        <MenuItem x:Name="TabsMenuItem"
                                  Header="_Tabs"
                                  IsCheckable="True"
                                  IsChecked="{Binding ConvertTabToSpaces, Converter={StaticResource BooleanToInverseBooleanConverter}, Mode=TwoWay}" />
                        <MenuItem x:Name="SpacesMenuItem"
                                  Header="_Spaces"
                                  IsCheckable="True"
                                  IsChecked="{Binding ConvertTabToSpaces, Mode=TwoWay}" />
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="FindMenuItem"
                              Header="_Find"
                              InputGestureText="Ctrl+F" />
                </MenuItem>
                <!--View MenuItem-->
                <MenuItem x:Name="ViewMenuItem"
                          Header="_View">
                    <MenuItem x:Name="FullscreenMenuItem"
                              Header="_Fullscreen"
                              Click="Fullscreen" />
                    <MenuItem x:Name="MaximizeMenuItem"
                              Header="Ma_ximize"
                              Click="MaximizeWindow" />
                    <MenuItem x:Name="MinimizeMenuItem"
                              Header="Mi_nimize"
                              Click="MinimizeWindow" />
                    <MenuItem x:Name="MinimizeToTrayMenuItem"
                              Header="Minimize to _Tray"
                              Click="MinimizeToTray" />
                    <Separator />
                    <MenuItem x:Name="ZoomMenuItem"
                              Header="_Zoom">
                        <MenuItem x:Name="ZoomInMenuItem"
                                  Header="Zoom _In"
                                  InputGestureText="Ctrl+="
                                  Command="{Binding ZoomInCommand}">
                            <MenuItem.Icon>
                                <Image Style="{DynamicResource IconZoomIn}" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem x:Name="ZoomOutMenuItem"
                                  Header="Zoom _Out"
                                  InputGestureText="Ctrl+-"
                                  Command="{Binding ZoomOutCommand}">
                            <MenuItem.Icon>
                                <Image Style="{DynamicResource IconZoomOut}" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem x:Name="DefaultZoomMenuItem"
                                  Header="_Default Zoom"
                                  InputGestureText="Ctrl+0"
                                  Command="{Binding RestoreDefaultZoomCommand}">
                            <MenuItem.Icon>
                                <Image Style="{DynamicResource IconRestore}" />
                            </MenuItem.Icon>
                        </MenuItem>
                    </MenuItem>
                    <MenuItem Header="_Editor">
                        <MenuItem Header="Show _Spaces"
                                  IsCheckable="True"
                                  IsChecked="{Binding ShowSpaces}" />
                        <MenuItem Header="Show _Tabs"
                                  IsCheckable="True"
                                  IsChecked="{Binding ShowTabs}" />
                        <MenuItem Header="Show _End Of Line"
                                  IsCheckable="True"
                                  IsChecked="{Binding ShowEndOfLine}" />
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="WindowOnTopMenuItem"
                              Header="_On Top"
                              IsCheckable="True" />
                    <MenuItem x:Name="StateBarMenuItem"
                              Header="State _Bar"
                              IsCheckable="True"
                              IsChecked="{Binding StateBar}" />
                    <MenuItem x:Name="UnicodeBarMenuItem"
                              Header="_Unicode Bar"
                              IsCheckable="True"
                              IsChecked="{Binding UnicodeBar}" />
                    <MenuItem x:Name="LineNumbersMenuItem"
                              Header="_Line Numbers"
                              IsCheckable="True"
                              IsChecked="{Binding LineNumbers}" />
                    <MenuItem x:Name="DiffVisibleMenuItem"
                              Header="_Diff"
                              IsCheckable="True"
                              IsChecked="{Binding Diff}" />
                    <MenuItem x:Name="StatusBarVisibleMenuItem"
                              Header="_Status Bar"
                              IsChecked="{Binding StatusBar}"
                              IsCheckable="True" />
                    <MenuItem x:Name="WordWrapMenuItem"
                              IsChecked="{Binding TextWrap}"
                              Header="_Wrap"
                              IsCheckable="True" />
                </MenuItem>
                <MenuItem x:Name="InsertMenuItem"
                          Header="_Insert">
                    <MenuItem x:Name="InsertFileAsTextMenuItem"
                              Header="_File As Text"
                              InputGestureText="Ctrl+Shift+O"
                              Command="{Binding InsertFileAsTextCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconLoadFile}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Last _Unicode Character"
                              Command="{Binding InsertLastUnicodeCharacterCommand}"
                              InputGestureText="Ctrl+U">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconUnicode}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="DateMenuItem"
                              Header="_Date">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconCalendar}" />
                        </MenuItem.Icon>
                        <MenuItem Header="mm/dd/yyyy"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="MM/dd/yyyy" />
                        <MenuItem Header="dd/mm/yyyy"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="dd/MM/yyyy" />
                        <Separator />
                        <MenuItem Header="day, month dd, yyyy"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="dddd, MMMM dd, yyyy" />
                    </MenuItem>
                    <MenuItem x:Name="TimeMenuItem"
                              Header="_Time">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconClock}" />
                        </MenuItem.Icon>
                        <MenuItem Header="h:mm"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="h:mm" />
                        <MenuItem Header="h:mm AM/PM"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="h:mm tt" />
                        <Separator />
                        <MenuItem Header="h:mm:ss"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="h:mm:ss" />
                        <MenuItem Header="h:mm:ss AM/PM"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="h:mm:ss tt" />
                    </MenuItem>
                    <MenuItem x:Name="DateTimeMenuItem"
                              Header="DateTi_me">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconCalendarClock}" />
                        </MenuItem.Icon>
                        <MenuItem Header="mm/dd/yyyy h:ss"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="MM/dd/yyyy h:ss" />
                        <MenuItem Header="mm/dd/yyyy hh:ss"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="MM/dd/yyyy hh:ss" />
                        <MenuItem Header="mm/dd/yyyy hh:ss AM/PM"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="MM/dd/yyyy hh:ss tt" />
                        <Separator />
                        <MenuItem Header="dd/mm/yyyy h:ss"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="dd/MM/yyyy h:ss" />
                        <MenuItem Header="dd/mm/yyyy hh:ss"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="dd/MM/yyyy hh:ss" />
                        <MenuItem Header="dd/mm/yyyy hh:ss AM/PM"
                                  Command="{Binding InsertDateTimeCommand}"
                                  CommandParameter="dd/MM/yyyy hh:ss tt" />
                    </MenuItem>
                    <Separator />
                    <MenuItem Header="Line _Before"
                              Command="{Binding InsertLineBeforeCommand}"
                              InputGestureText="Ctrl+Shift+Return">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconPreviousLine}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Line _After"
                              Command="{Binding InsertLineAfterCommand}"
                              InputGestureText="Ctrl+Return">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconNextLine}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem Header="Text At Line _Starts"
                              Command="{Binding InsertTextAtLineStartsCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconAlignStart}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Text At Line _Ends"
                              Command="{Binding InsertTextAtLineEndsCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconAlignEnd}" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <MenuItem x:Name="UnicodeMenuItem"
                          Header="_Unicode">
                    <MenuItem Header="_Next Group"
                              Command="{Binding SelectNextUnicodeGroupCommand}"
                              InputGestureText="Ctrl+."
                              StaysOpenOnClick="True">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconNext}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Previous Group"
                              Command="{Binding SelectPreviousUnicodeGroupCommand}"
                              InputGestureText="Ctrl+,"
                              StaysOpenOnClick="True">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconPrevious}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem Header="_Edit Source"
                              Command="{Binding EditUnicodeSourceCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconEdit}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Refresh"
                              Command="{Binding RefreshUnicodeCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconRefresh}" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <MenuItem x:Name="StashMenuItem"
                          Header="_Stash">
                    <MenuItem x:Name="StashFileMenuItem"
                              Header="_Stash"
                              Command="{Binding StashFileCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconPlus}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="StashedFilesMenuItem"
                              Header="_Open"
                              ItemsSource="{Binding StashedFiles}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconLoadFile}" />
                        </MenuItem.Icon>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}">
                                <Setter Property="Header"
                                        Value="{Binding}" />
                                <Setter Property="Command"
                                        Value="{Binding Path=DataContext.LoadStashedFileCommand, ElementName=StashedFilesMenuItem}" />
                                <Setter Property="CommandParameter"
                                        Value="{Binding}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="RefreshStashMenuItem"
                              Header="_Refresh"
                              Command="{Binding RefreshStashCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconRefresh}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="GotoStashMenuItem"
                              Header="_Open Stash"
                              Command="{Binding OpenStashCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconOpenFolder}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="UnstashMenuItem"
                              Header="_Unstash"
                              ItemsSource="{Binding StashedFiles}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconTrash}" />
                        </MenuItem.Icon>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}">
                                <Setter Property="Header"
                                        Value="{Binding}" />
                                <Setter Property="Command"
                                        Value="{Binding Path=DataContext.UnstashFileCommand, ElementName=UnstashMenuItem}" />
                                <Setter Property="CommandParameter"
                                        Value="{Binding}" />
                                <Setter Property="StaysOpenOnClick"
                                        Value="True" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                </MenuItem>
                <MenuItem x:Name="TemplateMenuItem"
                          Header="_Template">
                    <MenuItem x:Name="SaveAsTemplateMenuItem"
                              Header="_New"
                              Command="{Binding SaveAsTemplateCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconPlus}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="EditTemplateMenuItem"
                              Header="_Edit"
                              ItemsSource="{Binding Templates}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconEdit}" />
                        </MenuItem.Icon>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}">
                                <Setter Property="Header"
                                        Value="{Binding}" />
                                <Setter Property="Command"
                                        Value="{Binding Path=DataContext.EditTemplateCommand, ElementName=EditTemplateMenuItem}" />
                                <Setter Property="CommandParameter"
                                        Value="{Binding}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="LoadTemplateMenuItem"
                              Header="_Load"
                              ItemsSource="{Binding Templates}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconLoadFile}" />
                        </MenuItem.Icon>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}">
                                <Setter Property="Header"
                                        Value="{Binding}" />
                                <Setter Property="Command"
                                        Value="{Binding Path=DataContext.LoadTemplateCommand, ElementName=LoadTemplateMenuItem}" />
                                <Setter Property="CommandParameter"
                                        Value="{Binding}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <MenuItem x:Name="AppendTemplateMenuItem"
                              Header="_Append"
                              ItemsSource="{Binding Templates}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconMerge}" />
                        </MenuItem.Icon>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}">
                                <Setter Property="Header"
                                        Value="{Binding}" />
                                <Setter Property="Command"
                                        Value="{Binding Path=DataContext.AppendTemplateCommand, ElementName=LoadTemplateMenuItem}" />
                                <Setter Property="CommandParameter"
                                        Value="{Binding}" />
                                <Setter Property="StaysOpenOnClick"
                                        Value="True" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="RefreshTemplatesMenuItem"
                              Header="_Refresh"
                              Command="{Binding RefreshTemplatesCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconRefresh}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="GotoTemplatesMenuItem"
                              Header="_Open Templates"
                              Command="{Binding OpenTemplatesCommand}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconOpenFolder}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator />
                    <MenuItem x:Name="DeleteTemplateMenuItem"
                              Header="_Delete"
                              ItemsSource="{Binding Templates}">
                        <MenuItem.Icon>
                            <Image Style="{DynamicResource IconTrash}" />
                        </MenuItem.Icon>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}">
                                <Setter Property="Header"
                                        Value="{Binding}" />
                                <Setter Property="Command"
                                        Value="{Binding Path=DataContext.DeleteTemplateCommand, ElementName=DeleteTemplateMenuItem}" />
                                <Setter Property="CommandParameter"
                                        Value="{Binding}" />
                                <Setter Property="StaysOpenOnClick"
                                        Value="True" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="_Options">
                    <MenuItem Header="Settings"
                              Command="{Binding ShowSettingsCommand}" />
                </MenuItem>
            </Menu>
            <StackPanel HorizontalAlignment="Left"
                        Margin="0"
                        Orientation="Horizontal">
                <TextBlock x:Name="DashTextBlock"
                           Foreground="{DynamicResource App.ForegroundBrush}"
                           HorizontalAlignment="Left"
                           VerticalAlignment="Center"
                           Text="-  " />
                <TextBox x:Name="FileNameTextBox"
                         HorizontalAlignment="Left"
                         VerticalAlignment="Center"
                         Padding="0"
                         Foreground="{DynamicResource App.ForegroundBrush}"
                         Background="Transparent"
                         CaretBrush="White"
                         BorderThickness="1"
                         Text="{Binding FileNameDisplayText, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                         GotFocus="FileNameTextBox_GotFocus"
                         KeyDown="FileNameTextBox_KeyDown">
                    <i:Interaction.Behaviors>
                        <behaviors:RejectInvalidFileNameBehavior />
                    </i:Interaction.Behaviors>
                    <TextBox.Style>
                        <Style TargetType="{x:Type TextBox}">
                            <Setter Property="BorderBrush"
                                    Value="Transparent" />
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver"
                                         Value="True">
                                    <Setter Property="BorderBrush"
                                            Value="Gray" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>
                <TextBlock x:Name="AsteriskTextBlock"
                           Text="*"
                           Padding="0"
                           VerticalAlignment="Center"
                           Visibility="{Binding DocumentModified, Converter={StaticResource BooleanToVisibilityConverter}}" />
            </StackPanel>
            <StackPanel x:Name="WindowButtonsStackPanel"
                        DockPanel.Dock="Right"
                        Margin="0"
                        Orientation="Horizontal"
                        HorizontalAlignment="Right">
                <Button x:Name="MinimizeButton"
                        Style="{StaticResource TitleBarButtonStyle}"
                        Width="50"
                        Height="37"
                        BorderThickness="0"
                        Click="MinimizeWindow">
                    <Image x:Name="MinimizeIcon"
                           Style="{DynamicResource IconChromeMinimize}" />
                </Button>
                <Button x:Name="MaximizeButton"
                        Style="{StaticResource TitleBarButtonStyle}"
                        Width="50"
                        Height="37"
                        BorderThickness="0"
                        Click="MaximizeWindow">
                    <Image Style="{DynamicResource IconChromeMaximize}"
                           x:Name="MaximizeIcon" />
                </Button>
                <Button x:Name="CloseButton"
                        Style="{StaticResource CloseButtonStyle}"
                        Width="50"
                        BorderThickness="0"
                        Height="37"
                        Click="CloseWindow">
                    <Image Style="{DynamicResource IconChromeClose}" />
                </Button>
            </StackPanel>
        </DockPanel>
        <Grid Grid.Column="0"
              Grid.ColumnSpan="4"
              Grid.Row="1"
              Grid.RowSpan="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition
                        Width="{Binding ElementName=DiffBox, Path=Visibility, Converter={StaticResource VisibilityToWidthConverter}}" />
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <c:TextEditor x:Name="DiffBox"
                          Grid.Column="0"
                          Grid.Row="0"
                          Padding="10px"
                          AllowDrop="False"
                          BorderThickness="0"
                          IsReadOnly="True"
                          ShowLineNumbers="{Binding LineNumbers}"
                          Foreground="{DynamicResource App.ForegroundBrush}"
                          Background="{DynamicResource TextEditor.Background}"
                          Visibility="{Binding Diff, FallbackValue=Collapsed, TargetNullValue=Collapsed, Converter={StaticResource BooleanToVisibilityConverter}}"
                          FontFamily="{Binding FontFamily}"
                          FontSize="{Binding FontSize}"
                          WordWrap="{Binding TextWrap}"
                          ShowSpaces="{Binding ShowSpaces}"
                          ShowTabs="{Binding ShowTabs}"
                          ShowEndOfLine="{Binding ShowEndOfLine}"
                          BindableText="{Binding SavedText, Mode=OneWay}">
            </c:TextEditor>
            <GridSplitter Grid.Column="1"
                          DragIncrement="1"
                          Grid.Row="0"
                          Background="{DynamicResource App.BackgroundBrush}"
                          Width="9"
                          HorizontalAlignment="Stretch"
                          BorderThickness="4, 0"
                          BorderBrush="Transparent"
                          IsEnabled="False"
                          Margin="-5, 0"
                          Visibility="{Binding Diff, Converter={StaticResource BooleanToVisibilityConverter}}" />
            <c:TextEditor x:Name="InputBox"
                          Grid.Row="0"
                          Grid.Column="2"
                          AllowDrop="True"
                          Background="{DynamicResource TextEditor.Background}"
                          Foreground="{DynamicResource TextEditor.Foreground}"
                          CaretBrush="{DynamicResource TextEditor.CaretBrush}"
                          SelectionBrush="{DynamicResource TextEditor.SelectionBrush}"
                          BindableSelectedText="{Binding SelectedText, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                          ShowLineNumbers="{Binding LineNumbers}"
                          IndentationSize="{Binding TabSize, Mode=TwoWay}"
                          ConvertTabToSpaces="{Binding ConvertTabToSpaces, Mode=TwoWay}"
                          IsTyping="{Binding IsTyping, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          FontSize="{Binding FontSize}"
                          FontFamily="{Binding FontFamily}"
                          WordWrap="{Binding TextWrap}"
                          ShowSpaces="{Binding ShowSpaces}"
                          ShowTabs="{Binding ShowTabs}"
                          ShowEndOfLine="{Binding ShowEndOfLine}"
                          BindableText="{Binding InputText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                          Drop="InputBox_Drop">
                <c:TextEditor.ContextMenu>
                    <ContextMenu Background="{DynamicResource App.BackgroundBrush}">
                        <MenuItem Header="Cut"
                                  Command="ApplicationCommands.Cut" />
                        <MenuItem Header="Copy"
                                  Command="ApplicationCommands.Copy" />
                        <MenuItem Header="Paste"
                                  Command="ApplicationCommands.Paste" />
                        <Separator />
                        <MenuItem Header="Select All"
                                  Command="ApplicationCommands.SelectAll" />
                        <MenuItem Header="Clear All"
                                  Command="{Binding ClearAllTextCommand}"
                                  InputGestureText="Ctrl+Shift+Del" />
                        <Separator />
                        <MenuItem Header="Search in Web"
                                  Command="{Binding SearchInWebCommand}" />
                    </ContextMenu>
                </c:TextEditor.ContextMenu>
                <i:Interaction.Behaviors>
                    <behaviors:AutocloseTextBehavior />
                </i:Interaction.Behaviors>
            </c:TextEditor>
        </Grid>
        <DockPanel x:Name="StatusDockPanel"
                   Grid.Row="3"
                   Grid.Column="0"
                   Grid.ColumnSpan="4"
                   Height="35"
                   Background="Transparent"
                   Visibility="{Binding StatusBar, Converter={StaticResource BooleanToVisibilityConverter}}">
            <StackPanel DockPanel.Dock="Left"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Orientation="Horizontal"
                        Margin="0">
                <TextBlock x:Name="LineColumnTextBlock"
                           HorizontalAlignment="Left"
                           VerticalAlignment="Center"
                           FontSize="12"
                           Margin="15 0 15 0">
                    <TextBlock.Text>
                        <MultiBinding StringFormat="Ln {0}, Col {1}">
                            <Binding ElementName="InputBox"
                                     Path="LineIndex" />
                            <Binding ElementName="InputBox"
                                     Path="LineCharacterIndex" />
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
                <StackPanel Orientation="Horizontal"
                            Visibility="{Binding UnicodeBar, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Line HorizontalAlignment="Left"
                          StrokeThickness="0.5"
                          Margin="0 0 0 0"
                          Stroke="{DynamicResource App.ForegroundBrush}"
                          X1="0"
                          X2="0"
                          Y1="0"
                          Y2="20" />
                    <ComboBox Margin="15 -1 0 1"
                              Width="100"
                              MinWidth="100"
                              MinHeight="22"
                              FontSize="12"
                              VerticalContentAlignment="Center"
                              Height="22"
                              MaxHeight="22"
                              Padding="5 0 0 1"
                              BorderThickness="1"
                              BorderBrush="{DynamicResource App.DisabledForegroundBrush}"
                              Foreground="{DynamicResource App.ForegroundBrush}"
                              Background="{DynamicResource App.BackgroundBrush}"
                              ItemsSource="{Binding AvailableUnicodeNames}"
                              SelectedItem="{Binding SelectedUnicodeGroup}" />
                    <ItemsControl x:Name="UnicodeItemsControl"
                                  ItemsSource="{Binding AvailableUnicodeChars}"
                                  VerticalAlignment="Center">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Left"
                                            Margin="0 0 15 0"
                                            MaxWidth="500" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Button Foreground="{DynamicResource App.ForegroundBrush}"
                                        Background="{DynamicResource App.BackgroundBrush}"
                                        Content="{Binding}"
                                        MinHeight="1"
                                        Height="20"
                                        Padding="0"
                                        BorderBrush="{DynamicResource App.BackgroundBrush}"
                                        Command="{Binding DataContext.InsertUnicodeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
                                        CommandParameter="{Binding}"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        VerticalContentAlignment="Top"
                                        HorizontalContentAlignment="Center"
                                        Cursor="Hand"
                                        Margin="15 0 0 0" />
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
            </StackPanel>
            <StackPanel x:Name="IconStackPanel"
                        DockPanel.Dock="Right"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        Orientation="Horizontal"
                        Margin="0">
                <StackPanel Orientation="Horizontal"
                            Visibility="{Binding StateBar, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Image Style="{DynamicResource IconWindowOnTop}"
                           x:Name="WindowOnTopEnabledImage"
                           HorizontalAlignment="Right"
                           VerticalAlignment="Center"
                           Visibility="{Binding IsChecked, ElementName=WindowOnTopMenuItem, Converter={StaticResource BooleanToVisibilityConverter}}"
                           Margin="0 0 15 0" />
                    <Popup x:Name="WindowOnTopPopup"
                           PlacementTarget="{Binding ElementName=WindowOnTopEnabledImage}"
                           StaysOpen="True"
                           Placement="Custom"
                           CustomPopupPlacementCallback="OnCustomPopupPlacement"
                           AllowsTransparency="True"
                           PopupAnimation="Fade"
                           IsOpen="{Binding ElementName=WindowOnTopEnabledImage, Path=IsMouseOver, Mode=OneWay}">
                        <ContentControl Style="{StaticResource PopupContentStyle}">
                            <TextBlock Text="Window on Top" />
                        </ContentControl>
                    </Popup>
                    <Image x:Name="AutosaveEnabledImage"
                           Style="{DynamicResource IconTimer}"
                           HorizontalAlignment="Right"
                           VerticalAlignment="Center"
                           Visibility="{Binding AutosaveTimerInterval, Converter={StaticResource IntToVisibilityConverter}}"
                           Margin="0 0 15 0" />
                    <Popup x:Name="AutosavePopup"
                           PlacementTarget="{Binding ElementName=AutosaveEnabledImage}"
                           StaysOpen="True"
                           Placement="Custom"
                           CustomPopupPlacementCallback="OnCustomPopupPlacement"
                           AllowsTransparency="True"
                           PopupAnimation="Fade"
                           IsOpen="{Binding ElementName=AutosaveEnabledImage, Path=IsMouseOver, Mode=OneWay}">
                        <ContentControl Style="{StaticResource PopupContentStyle}">
                            <TextBlock Text="{Binding AutosaveTimerInterval, StringFormat='Autosave Enabled: {0} ms'}" />
                        </ContentControl>
                    </Popup>
                    <Image Style="{DynamicResource IconTextWrap}"
                           x:Name="TextWrapEnabledImage"
                           Margin="0 0 15 0"
                           VerticalAlignment="Center"
                           Visibility="{Binding TextWrap, Converter={StaticResource BooleanToVisibilityConverter}}" />
                    <Popup x:Name="TextWrapPopup"
                           PlacementTarget="{Binding ElementName=TextWrapEnabledImage}"
                           StaysOpen="True"
                           Placement="Custom"
                           CustomPopupPlacementCallback="OnCustomPopupPlacement"
                           AllowsTransparency="True"
                           PopupAnimation="Fade"
                           IsOpen="{Binding ElementName=TextWrapEnabledImage, Path=IsMouseOver, Mode=OneWay}">
                        <ContentControl Style="{StaticResource PopupContentStyle}">
                            <TextBlock Text="Text Wrap Enabled" />
                        </ContentControl>
                    </Popup>
                    <Line DockPanel.Dock="Right"
                          HorizontalAlignment="Right"
                          StrokeThickness="0.5"
                          Stroke="{DynamicResource App.ForegroundBrush}"
                          X1="0"
                          X2="0"
                          Y1="0"
                          Y2="20" />
                </StackPanel>
                <Image Style="{DynamicResource IconParagraph}"
                       x:Name="TextInfoImage"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       Margin="15 0 0 0" />
                <Popup x:Name="TextInfoPopup"
                       PlacementTarget="{Binding ElementName=TextInfoImage}"
                       StaysOpen="True"
                       Placement="Custom"
                       CustomPopupPlacementCallback="OnCustomPopupPlacement"
                       AllowsTransparency="True"
                       PopupAnimation="Fade"
                       IsOpen="{Binding ElementName=TextInfoImage, Path=IsMouseOver, Mode=OneWay}"
                       Opened="OnTextInfoPopupOpen">
                    <ContentControl Style="{StaticResource PopupContentStyle}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="15" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="0"
                                       Grid.Column="0"
                                       Text="Characters:" />
                            <TextBlock Grid.Row="0"
                                       Grid.Column="2"
                                       HorizontalAlignment="Right"
                                       Text="{Binding CharCount}" />
                            <TextBlock Grid.Row="2"
                                       Grid.Column="0"
                                       Text="Characters (no spaces):" />
                            <TextBlock Grid.Row="2"
                                       Grid.Column="2"
                                       HorizontalAlignment="Right"
                                       Text="{Binding CharNoSpacesCount}" />
                            <TextBlock Grid.Row="4"
                                       Grid.Column="0"
                                       Text="Words:" />
                            <TextBlock Grid.Row="4"
                                       Grid.Column="2"
                                       HorizontalAlignment="Right"
                                       Text="{Binding WordCount}" />
                            <TextBlock Grid.Row="6"
                                       Grid.Column="0"
                                       Text="Lines:" />
                            <TextBlock Grid.Row="6"
                                       Grid.Column="2"
                                       HorizontalAlignment="Right"
                                       Text="{Binding LineCount}" />
                            <TextBlock Grid.Row="8"
                                       Grid.Column="0"
                                       Text="Paragraphs:" />
                            <TextBlock Grid.Row="8"
                                       Grid.Column="2"
                                       HorizontalAlignment="Right"
                                       Text="{Binding ParagraphCount}" />
                        </Grid>
                    </ContentControl>
                </Popup>
                <Image Style="{DynamicResource IconInfo}"
                       x:Name="FileInfoImage"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       Margin="15 0 15 0" />
                <Popup x:Name="FileInfoPopup"
                       PlacementTarget="{Binding ElementName=FileInfoImage}"
                       StaysOpen="True"
                       Placement="Custom"
                       CustomPopupPlacementCallback="OnCustomPopupPlacement"
                       AllowsTransparency="True"
                       PopupAnimation="Fade"
                       IsOpen="{Binding ElementName=FileInfoImage, Path=IsMouseOver, Mode=OneWay}"
                       Opened="OnFileInfoPopupOpen">
                    <ContentControl Style="{StaticResource PopupContentStyle}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="0"
                                       Grid.Column="0"
                                       Text="Name:" />
                            <TextBlock Grid.Row="0"
                                       Grid.Column="2"
                                       HorizontalAlignment="Right"
                                       Text="{Binding FileNameDisplayText}" />
                            <TextBlock Grid.Row="2"
                                       Grid.Column="0"
                                       Text="Size:" />
                            <TextBlock Grid.Row="2"
                                       Grid.Column="2"
                                       HorizontalAlignment="Right"
                                       Text="{Binding DocumentSize, Converter={StaticResource LongToSizeStringConverter}}" />
                            <TextBlock Grid.Row="4"
                                       Grid.Column="0"
                                       Text="Path:" />
                            <TextBlock Grid.Row="4"
                                       Grid.Column="2"
                                       HorizontalAlignment="Right"
                                       Text="{Binding DocumentPath}" />
                            <TextBlock Grid.Row="6"
                                       Grid.Column="0"
                                       Text="Created:" />
                            <TextBlock Grid.Row="6"
                                       Grid.Column="2"
                                       HorizontalAlignment="Right"
                                       Text="{Binding DocumentDateCreated, Converter={StaticResource DateTimeToStringConverter}}" />
                            <TextBlock Grid.Row="8"
                                       Grid.Column="0"
                                       Text="Modified:" />
                            <TextBlock Grid.Row="8"
                                       Grid.Column="2"
                                       HorizontalAlignment="Right"
                                       Text="{Binding DocumentDateModified, Converter={StaticResource DateTimeToStringConverter}}" />
                            <TextBlock Grid.Row="10"
                                       Grid.Column="0"
                                       Text="Accessed:" />
                            <TextBlock Grid.Row="10"
                                       Grid.Column="2"
                                       HorizontalAlignment="Right"
                                       Text="{Binding DocumentDateAccessed, Converter={StaticResource DateTimeToStringConverter}}" />
                        </Grid>
                    </ContentControl>
                </Popup>
                <v:ActionPaletteView x:Name="ActionPalette"
                                     Placement="Center"
                                     PopupAnimation="Fade"
                                     DataContext="{Binding ActionPaletteViewModel}"
                                     Closed="ActionPalette_Closed" />
            </StackPanel>
        </DockPanel>
    </Grid>
</base:WindowBase>
